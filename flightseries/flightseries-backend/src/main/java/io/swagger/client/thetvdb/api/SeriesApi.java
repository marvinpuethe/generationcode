/*
 * TheTVDB API v2
 * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.
 *
 * OpenAPI spec version: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.thetvdb.api;

import io.swagger.client.thetvdb.ApiCallback;
import io.swagger.client.thetvdb.ApiClient;
import io.swagger.client.thetvdb.ApiException;
import io.swagger.client.thetvdb.ApiResponse;
import io.swagger.client.thetvdb.Configuration;
import io.swagger.client.thetvdb.Pair;
import io.swagger.client.thetvdb.ProgressRequestBody;
import io.swagger.client.thetvdb.ProgressResponseBody;
import io.swagger.client.thetvdb.model.FilterKeys;
import io.swagger.client.thetvdb.model.NotAuthorized;
import io.swagger.client.thetvdb.model.NotFound;
import io.swagger.client.thetvdb.model.SeriesActors;
import io.swagger.client.thetvdb.model.SeriesData;
import io.swagger.client.thetvdb.model.SeriesEpisodes;
import io.swagger.client.thetvdb.model.SeriesEpisodesQuery;
import io.swagger.client.thetvdb.model.SeriesEpisodesQueryParams;
import io.swagger.client.thetvdb.model.SeriesEpisodesSummary;
import io.swagger.client.thetvdb.model.SeriesImageQueryResults;
import io.swagger.client.thetvdb.model.SeriesImagesCounts;
import io.swagger.client.thetvdb.model.SeriesImagesQueryParams;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SeriesApi {
    private ApiClient apiClient;

    public SeriesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SeriesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for seriesIdActorsGet
     * @param id ID of the series (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdActorsGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/actors"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdActorsGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdActorsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdActorsGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns actors for the given series id
     * @param id ID of the series (required)
     * @return SeriesActors
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesActors seriesIdActorsGet(Long id) throws ApiException {
        ApiResponse<SeriesActors> resp = seriesIdActorsGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns actors for the given series id
     * @param id ID of the series (required)
     * @return ApiResponse&lt;SeriesActors&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesActors> seriesIdActorsGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdActorsGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SeriesActors>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns actors for the given series id
     * @param id ID of the series (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdActorsGetAsync(Long id, final ApiCallback<SeriesActors> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdActorsGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesActors>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdEpisodesGet
     * @param id ID of the series (required)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesGetCall(Long id, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdEpisodesGetValidateBeforeCall(Long id, String page, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdEpisodesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdEpisodesGetCall(id, page, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * All episodes for a given series. Paginated with 100 results per page.
     * @param id ID of the series (required)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @return SeriesEpisodes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesEpisodes seriesIdEpisodesGet(Long id, String page) throws ApiException {
        ApiResponse<SeriesEpisodes> resp = seriesIdEpisodesGetWithHttpInfo(id, page);
        return resp.getData();
    }

    /**
     * 
     * All episodes for a given series. Paginated with 100 results per page.
     * @param id ID of the series (required)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @return ApiResponse&lt;SeriesEpisodes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesEpisodes> seriesIdEpisodesGetWithHttpInfo(Long id, String page) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdEpisodesGetValidateBeforeCall(id, page, null, null);
        Type localVarReturnType = new TypeToken<SeriesEpisodes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * All episodes for a given series. Paginated with 100 results per page.
     * @param id ID of the series (required)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesGetAsync(Long id, String page, final ApiCallback<SeriesEpisodes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdEpisodesGetValidateBeforeCall(id, page, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesEpisodes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdEpisodesQueryGet
     * @param id ID of the series (required)
     * @param absoluteNumber Absolute number of the episode (optional)
     * @param airedSeason Aired season number (optional)
     * @param airedEpisode Aired episode number (optional)
     * @param dvdSeason DVD season number (optional)
     * @param dvdEpisode DVD episode number (optional)
     * @param imdbId IMDB id of the series (optional)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesQueryGetCall(Long id, String absoluteNumber, String airedSeason, String airedEpisode, String dvdSeason, String dvdEpisode, String imdbId, String page, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/query"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (absoluteNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("absoluteNumber", absoluteNumber));
        if (airedSeason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("airedSeason", airedSeason));
        if (airedEpisode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("airedEpisode", airedEpisode));
        if (dvdSeason != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dvdSeason", dvdSeason));
        if (dvdEpisode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dvdEpisode", dvdEpisode));
        if (imdbId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("imdbId", imdbId));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdEpisodesQueryGetValidateBeforeCall(Long id, String absoluteNumber, String airedSeason, String airedEpisode, String dvdSeason, String dvdEpisode, String imdbId, String page, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdEpisodesQueryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdEpisodesQueryGetCall(id, absoluteNumber, airedSeason, airedEpisode, dvdSeason, dvdEpisode, imdbId, page, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * This route allows the user to query against episodes for the given series. The response is a paginated array of episode records.
     * @param id ID of the series (required)
     * @param absoluteNumber Absolute number of the episode (optional)
     * @param airedSeason Aired season number (optional)
     * @param airedEpisode Aired episode number (optional)
     * @param dvdSeason DVD season number (optional)
     * @param dvdEpisode DVD episode number (optional)
     * @param imdbId IMDB id of the series (optional)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesEpisodesQuery
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesEpisodesQuery seriesIdEpisodesQueryGet(Long id, String absoluteNumber, String airedSeason, String airedEpisode, String dvdSeason, String dvdEpisode, String imdbId, String page, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesEpisodesQuery> resp = seriesIdEpisodesQueryGetWithHttpInfo(id, absoluteNumber, airedSeason, airedEpisode, dvdSeason, dvdEpisode, imdbId, page, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * This route allows the user to query against episodes for the given series. The response is a paginated array of episode records.
     * @param id ID of the series (required)
     * @param absoluteNumber Absolute number of the episode (optional)
     * @param airedSeason Aired season number (optional)
     * @param airedEpisode Aired episode number (optional)
     * @param dvdSeason DVD season number (optional)
     * @param dvdEpisode DVD episode number (optional)
     * @param imdbId IMDB id of the series (optional)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesEpisodesQuery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesEpisodesQuery> seriesIdEpisodesQueryGetWithHttpInfo(Long id, String absoluteNumber, String airedSeason, String airedEpisode, String dvdSeason, String dvdEpisode, String imdbId, String page, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdEpisodesQueryGetValidateBeforeCall(id, absoluteNumber, airedSeason, airedEpisode, dvdSeason, dvdEpisode, imdbId, page, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesEpisodesQuery>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This route allows the user to query against episodes for the given series. The response is a paginated array of episode records.
     * @param id ID of the series (required)
     * @param absoluteNumber Absolute number of the episode (optional)
     * @param airedSeason Aired season number (optional)
     * @param airedEpisode Aired episode number (optional)
     * @param dvdSeason DVD season number (optional)
     * @param dvdEpisode DVD episode number (optional)
     * @param imdbId IMDB id of the series (optional)
     * @param page Page of results to fetch. Defaults to page 1 if not provided. (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesQueryGetAsync(Long id, String absoluteNumber, String airedSeason, String airedEpisode, String dvdSeason, String dvdEpisode, String imdbId, String page, String acceptLanguage, final ApiCallback<SeriesEpisodesQuery> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdEpisodesQueryGetValidateBeforeCall(id, absoluteNumber, airedSeason, airedEpisode, dvdSeason, dvdEpisode, imdbId, page, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesEpisodesQuery>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdEpisodesQueryParamsGet
     * @param id ID of the series (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesQueryParamsGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/query/params"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdEpisodesQueryParamsGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdEpisodesQueryParamsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdEpisodesQueryParamsGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the allowed query keys for the &#x60;/series/{id}/episodes/query&#x60; route
     * @param id ID of the series (required)
     * @return SeriesEpisodesQueryParams
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesEpisodesQueryParams seriesIdEpisodesQueryParamsGet(Long id) throws ApiException {
        ApiResponse<SeriesEpisodesQueryParams> resp = seriesIdEpisodesQueryParamsGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns the allowed query keys for the &#x60;/series/{id}/episodes/query&#x60; route
     * @param id ID of the series (required)
     * @return ApiResponse&lt;SeriesEpisodesQueryParams&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesEpisodesQueryParams> seriesIdEpisodesQueryParamsGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdEpisodesQueryParamsGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SeriesEpisodesQueryParams>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the allowed query keys for the &#x60;/series/{id}/episodes/query&#x60; route
     * @param id ID of the series (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesQueryParamsGetAsync(Long id, final ApiCallback<SeriesEpisodesQueryParams> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdEpisodesQueryParamsGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesEpisodesQueryParams>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdEpisodesSummaryGet
     * @param id ID of the series (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesSummaryGetCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/episodes/summary"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdEpisodesSummaryGetValidateBeforeCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdEpisodesSummaryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdEpisodesSummaryGetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns a summary of the episodes and seasons available for the series.  __Note__: Season \&quot;0\&quot; is for all episodes that are considered to be specials.
     * @param id ID of the series (required)
     * @return SeriesEpisodesSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesEpisodesSummary seriesIdEpisodesSummaryGet(Long id) throws ApiException {
        ApiResponse<SeriesEpisodesSummary> resp = seriesIdEpisodesSummaryGetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * 
     * Returns a summary of the episodes and seasons available for the series.  __Note__: Season \&quot;0\&quot; is for all episodes that are considered to be specials.
     * @param id ID of the series (required)
     * @return ApiResponse&lt;SeriesEpisodesSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesEpisodesSummary> seriesIdEpisodesSummaryGetWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdEpisodesSummaryGetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<SeriesEpisodesSummary>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a summary of the episodes and seasons available for the series.  __Note__: Season \&quot;0\&quot; is for all episodes that are considered to be specials.
     * @param id ID of the series (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdEpisodesSummaryGetAsync(Long id, final ApiCallback<SeriesEpisodesSummary> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdEpisodesSummaryGetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesEpisodesSummary>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdFilterGet
     * @param id ID of the series (required)
     * @param keys Comma-separated list of keys to filter by (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdFilterGetCall(Long id, String keys, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/filter"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keys != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keys", keys));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdFilterGetValidateBeforeCall(Long id, String keys, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdFilterGet(Async)");
        }
        
        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException("Missing the required parameter 'keys' when calling seriesIdFilterGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdFilterGetCall(id, keys, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the &#x60;/series/{id}/filter/params&#x60; route.
     * @param id ID of the series (required)
     * @param keys Comma-separated list of keys to filter by (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesData seriesIdFilterGet(Long id, String keys, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesData> resp = seriesIdFilterGetWithHttpInfo(id, keys, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the &#x60;/series/{id}/filter/params&#x60; route.
     * @param id ID of the series (required)
     * @param keys Comma-separated list of keys to filter by (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesData> seriesIdFilterGetWithHttpInfo(Long id, String keys, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdFilterGetValidateBeforeCall(id, keys, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a series records, filtered by the supplied comma-separated list of keys. Query keys can be found at the &#x60;/series/{id}/filter/params&#x60; route.
     * @param id ID of the series (required)
     * @param keys Comma-separated list of keys to filter by (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdFilterGetAsync(Long id, String keys, String acceptLanguage, final ApiCallback<SeriesData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdFilterGetValidateBeforeCall(id, keys, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdFilterParamsGet
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdFilterParamsGetCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/filter/params"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdFilterParamsGetValidateBeforeCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdFilterParamsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdFilterParamsGetCall(id, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the list of keys available for the &#x60;/series/{id}/filter&#x60; route
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return FilterKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FilterKeys seriesIdFilterParamsGet(Long id, String acceptLanguage) throws ApiException {
        ApiResponse<FilterKeys> resp = seriesIdFilterParamsGetWithHttpInfo(id, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Returns the list of keys available for the &#x60;/series/{id}/filter&#x60; route
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;FilterKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FilterKeys> seriesIdFilterParamsGetWithHttpInfo(Long id, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdFilterParamsGetValidateBeforeCall(id, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<FilterKeys>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of keys available for the &#x60;/series/{id}/filter&#x60; route
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdFilterParamsGetAsync(Long id, String acceptLanguage, final ApiCallback<FilterKeys> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdFilterParamsGetValidateBeforeCall(id, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FilterKeys>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdGet
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdGetCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdGetValidateBeforeCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdGetCall(id, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns a series records that contains all information known about a particular series id.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesData seriesIdGet(Long id, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesData> resp = seriesIdGetWithHttpInfo(id, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Returns a series records that contains all information known about a particular series id.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesData> seriesIdGetWithHttpInfo(Long id, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdGetValidateBeforeCall(id, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesData>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a series records that contains all information known about a particular series id.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdGetAsync(Long id, String acceptLanguage, final ApiCallback<SeriesData> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdGetValidateBeforeCall(id, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesData>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdHead
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdHeadCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdHeadValidateBeforeCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdHead(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdHeadCall(id, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns header information only about the given series ID.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void seriesIdHead(Long id, String acceptLanguage) throws ApiException {
        seriesIdHeadWithHttpInfo(id, acceptLanguage);
    }

    /**
     * 
     * Returns header information only about the given series ID.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> seriesIdHeadWithHttpInfo(Long id, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdHeadValidateBeforeCall(id, acceptLanguage, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * Returns header information only about the given series ID.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdHeadAsync(Long id, String acceptLanguage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdHeadValidateBeforeCall(id, acceptLanguage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for seriesIdImagesGet
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesGetCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/images"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdImagesGetValidateBeforeCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdImagesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdImagesGetCall(id, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns a summary of the images for a particular series
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesImagesCounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesImagesCounts seriesIdImagesGet(Long id, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesImagesCounts> resp = seriesIdImagesGetWithHttpInfo(id, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Returns a summary of the images for a particular series
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesImagesCounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesImagesCounts> seriesIdImagesGetWithHttpInfo(Long id, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdImagesGetValidateBeforeCall(id, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesImagesCounts>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a summary of the images for a particular series
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesGetAsync(Long id, String acceptLanguage, final ApiCallback<SeriesImagesCounts> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdImagesGetValidateBeforeCall(id, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesImagesCounts>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdImagesQueryGet
     * @param id ID of the series (required)
     * @param keyType Type of image you&#39;re querying for (fanart, poster, etc. See ../images/query/params for more details). (optional)
     * @param resolution Resolution to filter by (1280x1024, for example) (optional)
     * @param subKey Subkey for the above query keys. See /series/{id}/images/query/params for more information (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesQueryGetCall(Long id, String keyType, String resolution, String subKey, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/images/query"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keyType", keyType));
        if (resolution != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resolution", resolution));
        if (subKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("subKey", subKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdImagesQueryGetValidateBeforeCall(Long id, String keyType, String resolution, String subKey, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdImagesQueryGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdImagesQueryGetCall(id, keyType, resolution, subKey, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Query images for the given series ID.
     * @param id ID of the series (required)
     * @param keyType Type of image you&#39;re querying for (fanart, poster, etc. See ../images/query/params for more details). (optional)
     * @param resolution Resolution to filter by (1280x1024, for example) (optional)
     * @param subKey Subkey for the above query keys. See /series/{id}/images/query/params for more information (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesImageQueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesImageQueryResults seriesIdImagesQueryGet(Long id, String keyType, String resolution, String subKey, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesImageQueryResults> resp = seriesIdImagesQueryGetWithHttpInfo(id, keyType, resolution, subKey, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Query images for the given series ID.
     * @param id ID of the series (required)
     * @param keyType Type of image you&#39;re querying for (fanart, poster, etc. See ../images/query/params for more details). (optional)
     * @param resolution Resolution to filter by (1280x1024, for example) (optional)
     * @param subKey Subkey for the above query keys. See /series/{id}/images/query/params for more information (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesImageQueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesImageQueryResults> seriesIdImagesQueryGetWithHttpInfo(Long id, String keyType, String resolution, String subKey, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdImagesQueryGetValidateBeforeCall(id, keyType, resolution, subKey, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesImageQueryResults>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Query images for the given series ID.
     * @param id ID of the series (required)
     * @param keyType Type of image you&#39;re querying for (fanart, poster, etc. See ../images/query/params for more details). (optional)
     * @param resolution Resolution to filter by (1280x1024, for example) (optional)
     * @param subKey Subkey for the above query keys. See /series/{id}/images/query/params for more information (optional)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesQueryGetAsync(Long id, String keyType, String resolution, String subKey, String acceptLanguage, final ApiCallback<SeriesImageQueryResults> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdImagesQueryGetValidateBeforeCall(id, keyType, resolution, subKey, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesImageQueryResults>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for seriesIdImagesQueryParamsGet
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesQueryParamsGetCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/series/{id}/images/query/params"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "jwtToken" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call seriesIdImagesQueryParamsGetValidateBeforeCall(Long id, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriesIdImagesQueryParamsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = seriesIdImagesQueryParamsGetCall(id, acceptLanguage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * Returns the allowed query keys for the &#x60;/series/{id}/images/query&#x60; route. Contains a parameter record for each unique &#x60;keyType&#x60;, listing values that will return results.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return SeriesImagesQueryParams
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SeriesImagesQueryParams seriesIdImagesQueryParamsGet(Long id, String acceptLanguage) throws ApiException {
        ApiResponse<SeriesImagesQueryParams> resp = seriesIdImagesQueryParamsGetWithHttpInfo(id, acceptLanguage);
        return resp.getData();
    }

    /**
     * 
     * Returns the allowed query keys for the &#x60;/series/{id}/images/query&#x60; route. Contains a parameter record for each unique &#x60;keyType&#x60;, listing values that will return results.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @return ApiResponse&lt;SeriesImagesQueryParams&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SeriesImagesQueryParams> seriesIdImagesQueryParamsGetWithHttpInfo(Long id, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = seriesIdImagesQueryParamsGetValidateBeforeCall(id, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<SeriesImagesQueryParams>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the allowed query keys for the &#x60;/series/{id}/images/query&#x60; route. Contains a parameter record for each unique &#x60;keyType&#x60;, listing values that will return results.
     * @param id ID of the series (required)
     * @param acceptLanguage Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call seriesIdImagesQueryParamsGetAsync(Long id, String acceptLanguage, final ApiCallback<SeriesImagesQueryParams> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = seriesIdImagesQueryParamsGetValidateBeforeCall(id, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SeriesImagesQueryParams>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
